import java.util.*;

public class BankingApplication {
    private Map<String, Account> accounts;
    private Scanner scanner;

    public BankingApplication() {
        accounts = new HashMap<>();
        scanner = new Scanner(System.in);
    }

    public void run() {
        boolean exit = false;
        while (!exit) {
            System.out.println("Welcome to the Banking Application!");
            System.out.println("1. Create Account");
            System.out.println("2. Deposit");
            System.out.println("3. Withdraw");
            System.out.println("4. Check Balance");
            System.out.println("5. Transfer Funds");
            System.out.println("6. Delete Account");
            System.out.println("7. Account Statement");
            System.out.println("8. Calculate Interest");
            System.out.println("0. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume the newline character

            switch (choice) {
                case 0:
                    exit = true;
                    break;
                case 1:
                    createAccount();
                    break;
                case 2:
                    deposit();
                    break;
                case 3:
                    withdraw();
                    break;
                case 4:
                    checkBalance();
                    break;
                case 5:
                    transferFunds();
                    break;
                case 6:
                    deleteAccount();
                    break;
                case 7:
                    displayAccountStatement();
                    break;
                case 8:
                    calculateInterest();
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }

        scanner.close();
    }

    private void createAccount() {
        System.out.print("Enter the account number: ");
        String accountNumber = scanner.nextLine();
        if (accounts.containsKey(accountNumber)) {
            System.out.println("Account already exists.");
        } else {
            System.out.print("Enter the initial balance: ");
            double initialBalance = scanner.nextDouble();
            scanner.nextLine(); // Consume the newline character
            System.out.print("Enter the account holder name: ");
            String accountHolderName = scanner.nextLine();
            System.out.print("Enter the account type: ");
            String accountType = scanner.nextLine();
            System.out.print("Enter the overdraft limit (if applicable): ");
            double overdraftLimit = scanner.nextDouble();
            scanner.nextLine(); // Consume the newline character

            Account account = new Account(accountNumber, initialBalance, accountHolderName, accountType, overdraftLimit);
            accounts.put(accountNumber, account);
            System.out.println("Account created successfully!");
        }
    }

    private void deposit() {
        System.out.print("Enter the account number: ");
        String accountNumber = scanner.nextLine();
        if (accounts.containsKey(accountNumber)) {
            System.out.print("Enter the amount to deposit: ");
            double amount = scanner.nextDouble();
            scanner.nextLine(); // Consume the newline character

            Account account = accounts.get(accountNumber);
            account.deposit(amount);
            System.out.println("Deposit successful!");
        } else {
            System.out.println("Account not found.");
        }
    }

    private void withdraw() {
        System.out.print("Enter the account number: ");
        String accountNumber = scanner.nextLine();
        if (accounts.containsKey(accountNumber)) {
            System.out.print("Enter the amount to withdraw: ");
            double amount = scanner.nextDouble();
            scanner.nextLine(); // Consume the newline character

            Account account = accounts.get(accountNumber);
            boolean success = account.withdraw(amount);
            if (success) {
                System.out.println("Withdrawal successful!");
            } else {
                System.out.println("Insufficient balance.");
            }
        } else {
            System.out.println("Account not found.");
        }
    }

    private void checkBalance() {
        System.out.print("Enter the account number: ");
        String accountNumber = scanner.nextLine();
        if (accounts.containsKey(accountNumber)) {
            Account account = accounts.get(accountNumber);
            double balance = account.getBalance();
            System.out.println("Account balance: " + balance);
        } else {
            System.out.println("Account not found.");
        }
    }

    private void transferFunds() {
        System.out.print("Enter the source account number: ");
        String sourceAccountNumber = scanner.nextLine();
        if (!accounts.containsKey(sourceAccountNumber)) {
            System.out.println("Source account not found.");
            return;
        }

        System.out.print("Enter the destination account number: ");
        String destinationAccountNumber = scanner.nextLine();
        if (!accounts.containsKey(destinationAccountNumber)) {
            System.out.println("Destination account not found.");
            return;
        }

        System.out.print("Enter the amount to transfer: ");
        double amount = scanner.nextDouble();
        scanner.nextLine(); // Consume the newline character

        Account sourceAccount = accounts.get(sourceAccountNumber);
        Account destinationAccount = accounts.get(destinationAccountNumber);
        boolean success = sourceAccount.transferTo continue the code from where we left off:

```java
        boolean success = sourceAccount.transferFunds(destinationAccount, amount);
        if (success) {
            System.out.println("Transfer successful!");
        } else {
            System.out.println("Transfer failed. Insufficient balance.");
        }
    }

    private void deleteAccount() {
        System.out.print("Enter the account number: ");
        String accountNumber = scanner.nextLine();
        if (accounts.containsKey(accountNumber)) {
            accounts.remove(accountNumber);
            System.out.println("Account deleted successfully!");
        } else {
            System.out.println("Account not found.");
        }
    }

    private void displayAccountStatement() {
        System.out.print("Enter the account number: ");
        String accountNumber = scanner.nextLine();
        if (accounts.containsKey(accountNumber)) {
            Account account = accounts.get(accountNumber);
            List<Transaction> transactions = account.getTransactionHistory();
            System.out.println("Account Statement for Account Number: " + accountNumber);
            for (Transaction transaction : transactions) {
                System.out.println(transaction);
            }
        } else {
            System.out.println("Account not found.");
        }
    }

    private void calculateInterest() {
        System.out.print("Enter the account number: ");
        String accountNumber = scanner.nextLine();
        if (accounts.containsKey(accountNumber)) {
            Account account = accounts.get(accountNumber);
            System.out.print("Enter the interest rate: ");
            double interestRate = scanner.nextDouble();
            scanner.nextLine(); // Consume the newline character

            double interestAmount = account.calculateInterest(interestRate);
            System.out.println("Interest calculated: " + interestAmount);
        } else {
            System.out.println("Account not found.");
        }
    }

    public static void main(String[] args) {
        BankingApplication bankingApp = new BankingApplication();
        bankingApp.run();
    }
}