 @Test
    public void testDepositIntoExistingAccount() {
        bankingApp.createAccount("1234567890", 1000.0);
        bankingApp.deposit("1234567890", 500.0);
        double balance = bankingApp.checkBalance("1234567890");
        assertEquals(1500.0, balance, 0.01);
        assertNotNull(bankingApp.checkBalance("1234567890"));
    }

    @Test
    public void testDepositIntoNonExistingAccount() {
        bankingApp.deposit("1234567890", 500.0);
        double balance = bankingApp.checkBalance("1234567890");
        assertEquals(0.0, balance, 0.01);
    }

    @Test
    public void testWithdrawFromExistingAccountWithSufficientBalance() {
        bankingApp.createAccount("1234567890", 1000.0);
        bankingApp.withdraw("1234567890", 500.0);
        double balance = bankingApp.checkBalance("1234567890");
        assertEquals(50.0, balance, 0.01);
    }

    @Test
    public void testWithdrawFromExistingAccountWithInsufficientBalance() {
        bankingApp.createAccount("1234567890", 1000.0);
        bankingApp.withdraw("1234567890", 1500.0);
        double balance = bankingApp.checkBalance("1234567890");
        assertEquals(1000.0, balance, 0.01);
    }

    @Test
    public void testWithdrawFromNonExistingAccount() {
        bankingApp.withdraw("1234567890", 500.0);
        double balance = bankingApp.checkBalance("1234567890");
        assertEquals(0.0, balance, 0.01);
    }
